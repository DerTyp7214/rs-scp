name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libssh-dev

      - name: Install SSH on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install libssh
          echo 'export LIBRARY_PATH=$(brew --prefix libssh)/lib:$LIBRARY_PATH' >> $GITHUB_ENV
          echo 'export LD_LIBRARY_PATH=$(brew --prefix libssh)/lib:$LD_LIBRARY_PATH' >> $GITHUB_ENV

      - name: Install SSH on Windows
        if: matrix.os == 'windows-latest'
        run: vcpkg install libssh

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Build
        run: cargo build --release

      - name: Upload Linux binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: linux-binary
          path: target/release/rs-scp

      - name: Upload macOS binary
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-binary
          path: target/release/rs-scp

      - name: Upload Windows binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-binary
          path: target/release/rs-scp.exe

  create_tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version
        id: cargo_version
        run: echo "::set-output name=version::$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')"

      - name: Create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag v${{ steps.cargo_version.outputs.version }}
          git push origin v${{ steps.cargo_version.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: [ build, create_tag ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.cargo_version.outputs.version }}
          release_name: Release v${{ steps.cargo_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/rs-scp
          asset_name: rs-scp-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/rs-scp
          asset_name: rs-scp-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/rs-scp.exe
          asset_name: rs-scp-windows.exe
          asset_content_type: application/octet-stream