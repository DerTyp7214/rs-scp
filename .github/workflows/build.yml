name: Build and Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
          ubuntu-latest,
          macos-latest,
          windows-latest
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache vcpkg on Windows
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install SSH on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y libssh-dev
          mkdir libs
          mkdir libs/linux
          mkdir libs/linux/x86_64
          cp /usr/lib/x86_64-linux-gnu/libssh.so libs/linux/x86_64/libssh.so

      - name: Install SSH on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install libssh
          echo 'export LIBRARY_PATH=$(brew --prefix libssh)/lib:$LIBRARY_PATH' >> $GITHUB_ENV
          echo 'export LD_LIBRARY_PATH=$(brew --prefix libssh)/lib:$LD_LIBRARY_PATH' >> $GITHUB_ENV
          mkdir libs
          mkdir libs/macos
          mkdir libs/macos/x86_64
          cp /opt/homebrew/Cellar/libssh/*/lib/libssh* libs/macos/x86_64/

      - name: Install SSH on Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "LIBRARY_PATH=C:\vcpkg\installed\x64-windows\lib;C:\vcpkg\installed\x64-windows\bin;$env:LIBRARY_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LD_LIBRARY_PATH=C:\vcpkg\installed\x64-windows\lib;C:\vcpkg\installed\x64-windows\bin;$env:LD_LIBRARY_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PATH=C:\vcpkg\installed\x64-windows\lib;C:\vcpkg\installed\x64-windows\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
          vcpkg install libssh
          mkdir libs
          mkdir libs\windows
          mkdir libs\windows\x86_64
          Copy-Item "C:\vcpkg\installed\x64-windows\lib\ssh.lib" "libs\windows\x86_64\ssh.lib"
          echo "RUSTFLAGS=-L libs/windows/x86_64" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly

      - name: Build
        run: cargo build --release

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binary
          path: target/release/rs-scp[.exe]?

  create_tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: cargo_version
        run: echo "::set-output name=version::$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')"

      - name: Create tag
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag v${{ steps.cargo_version.outputs.version }}
          git push origin v${{ steps.cargo_version.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: [ build, create_tag ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: cargo_version
        run: echo "::set-output name=version::$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')"

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-binary
          path: target/release/linux

      - name: Download macOS binary
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: macos-latest-binary
          path: target/release/macos

      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-binary
          path: target/release/windows

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.cargo_version.outputs.version }}
          name: Release v${{ steps.cargo_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/linux/rs-scp
          asset_name: rs-scp-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/macos/rs-scp
          asset_name: rs-scp-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/windows/rs-scp.exe
          asset_name: rs-scp-windows.exe
          asset_content_type: application/octet-stream